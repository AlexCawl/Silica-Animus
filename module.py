from config import *


def is_console():
    def predicate(ctx):
        return ctx.message.channel == bot.get_channel(db.get_directory(ctx.guild.id).data[0])

    return commands.check(predicate)


class Standart(commands.Cog):
    """–ö–ª–∞—Å—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def joke(self, ctx):
        await bot.get_channel(ctx.channel.id).send(f"```{random.choice(all_jokes)}```")

    @commands.command()
    @is_console()
    async def sh(self, ctx):
        """–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        output = "**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Ä–æ–ª–µ–π:**" \
                 "\t$rating [id | *]\n" \
                 "\t$set_rating [id] [value]\n" \
                 "\t$add_rating [id] [value]\n" \
                 "\t$update\n" \
                 "\t$roles\n" \
                 "\t$set_roles [id] [r_lower] [r_upper], ...\n" \
                 "\t$clear_roles [id], ...\n" \
                 "**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:**\n" \
                 "\t$cd\n" \
                 "\t$set_cd [console] [logs] [info]\n" \
                 "**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n" \
                 "\t$joke\n" \
                 "\t$hello_world\n" \
                 "\t$sh\n" \
                 "**–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–ø—Ä–æ—Å–∞–º–∏:**\n" \
                 "\t$set_survey [title] [case1], ... \n" \
                 "\t$get_survey\n" \
                 "\t$check_survey [message_id]\n" \
                 "\t$clear_survey [message_id]\n" \

        await ctx.message.channel.send(output)

    @commands.command()
    @is_console()
    async def hello_world(self, ctx, channel_id: int):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–∏—á–∫–∞–º"""

        output = "**–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –Ω–æ–≤–∏—á–∫–∞–º!**\n" \
                 "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä _–¶–µ–Ω—Ç—Ä–∞ –û–ª–∏–º–ø–∏–∞–¥–Ω–æ–≥–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è_ –Æ–£—Ä–ì–£\n" \
                 "–¶–µ–Ω—Ç—Ä –æ–ª–∏–º–ø–∏–∞–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Æ–£—Ä–ì–£ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ –ª–∏—á–Ω—ã–º –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n" \
                 "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫ —É—á–∞—Å—Ç–∏—é –≤ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ **—Ç—Ä–∏ –≥–æ–¥–∞**. –ö–∞–∂–¥—ã–π –≥–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n" \
                 "\t**–£—Ä–æ–≤–µ–Ω—å 1:** –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞¬ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n" \
                 "\t**–£—Ä–æ–≤–µ–Ω—å 2:** –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–û–ª–∏–º–ø–∏–∞–¥–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞¬ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ –≤—ã—Ö–æ–¥—É –≤ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª ACM ICPC.\n" \
                 "\t**–£—Ä–æ–≤–µ–Ω—å 3:** –ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–ª–∏–º–ø–∏–∞–¥–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞¬ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ –æ–ø—ã—Ç–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã —Ö–æ—Ä–æ—à–æ –≤—ã—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–µ –∏ –ø—Ä–æ–π—Ç–∏ –≤ —Ñ–∏–Ω–∞–ª ACM ICPC."
        await bot.get_channel(channel_id).send(f"""{output}""")
        output = "**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞:**\n" \
                 "[1] **–ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞**\n" \
                 "\t–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–ø—Ä–∏–±—ã–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º.\n" \
                 "[2] **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n" \
                 "\t–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n" \
                 "[3] **–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã**\n" \
                 "\t–ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏–≥—Ä—ã –≤ Wordle.\n" \
                 "[4] **–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã**\n" \
                 "\t–ù–µ—Å–∫–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n" \
                 "[5] **–ö–æ–Ω—Å–æ–ª—å**\n" \
                 "\t _–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º._ –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–º –±–æ—Ç–æ–º.\n" \
                 "[6-7-8] **–£—Ä–æ–≤–Ω–∏ –æ–ª–∏–º–ø–∏–∞–¥–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã**\n" \
                 "\t–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∏–º —É—Ä–æ–≤–Ω—é.\n"
        await bot.get_channel(channel_id).send(f"""{output}""")
        output = "**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞**\n" \
                 "\t1. –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞\n" \
                 "\t2. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤\n" \
                 "\t3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n" \
                 "\t4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º\n" \
                 "\t5. –ü–µ—Ä–µ–Ω–æ—Å –∏–≥—Ä—ã Wordle –≤ Discord –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∞–Ω–∫ —Å–ª–æ–≤\n" \
                 "\t6. –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç\n"
        await bot.get_channel(channel_id).send(f"""{output}""")
        output = "```–ù–∞–∂–∏–º–∞–π –Ω–∞ —ç—Ç—É —Ä–µ–∞–∫—Ü–∏—é, –∏ –Ω–∞—á–∏–Ω–∞–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏)```"
        message = await bot.get_channel(channel_id).send(f"""{output}""")
        await message.add_reaction("üíª")


class Directory(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def set_cd(self, ctx, console_id, log_id, info_id):
        """
            –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞, –≥–¥–µ –æ–Ω –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∏—Å–∞—Ç—å –ª–æ–≥–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏
            –∫–æ–º–∞–Ω–¥, –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        """
        console_id = int(console_id)
        log_id = int(log_id)
        info_id = int(info_id)

        res = db.set_directory(ctx.guild.id, bot.get_guild(ctx.guild.id).name, console_id, log_id, info_id)

        await ctx.message.channel.send(f'```–†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n'
                                       f'–ö–æ–Ω—Å–æ–ª—å: {bot.get_channel(console_id)}\n'
                                       f'–õ–æ–≥–∏: {bot.get_channel(log_id)}\n'
                                       f'–û–±—ä—è–≤–ª–µ–Ω–∏—è: {bot.get_channel(info_id)}```')
        await bot.get_channel(console_id).send(f'```–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: [–ö–æ–Ω—Å–æ–ª—å]```')
        await bot.get_channel(log_id).send(f'```–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: [–õ–æ–≥–∏]```')
        await bot.get_channel(info_id).send(f'```–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: [–û–±—ä—è–≤–ª–µ–Ω–∏—è]```')

    @commands.command()
    async def cd(self, ctx):
        """
            –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞, –≥–¥–µ –æ–Ω –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∏—Å–∞—Ç—å –ª–æ–≥–∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏
            –∫–æ–º–∞–Ω–¥, –≤—ã–≤–æ–¥–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        """

        res = db.get_directory(ctx.guild.id)

        await ctx.message.channel.send(f'```–†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n'
                                       f'–ö–æ–Ω—Å–æ–ª—å: {bot.get_channel(res.data[0])}\n'
                                       f'–õ–æ–≥–∏: {bot.get_channel(res.data[1])}\n'
                                       f'–û–±—ä—è–≤–ª–µ–Ω–∏—è: {bot.get_channel(res.data[2])}```')


class Rating(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def roles_output(self, roles_dictionary):
        output = ""

        for key in roles_dictionary:
            output += f"[{key}] {roles_dictionary[key][1][0]:5.0f} {roles_dictionary[key][1][1]:5.0f}\t{roles_dictionary[key][0]}\n"
        return output

    async def solo_update(self, server_id, user_id):
        output = db.get_directory(server_id).data[1]
        server_roles = db.get_roles(server_id).data

        current_user = bot.get_guild(server_id).get_member(user_id)
        current_value = db.get_rating(server_id, user_id).data[user_id][1]

        for role in server_roles:
            current_role = bot.get_guild(server_id).get_role(role)
            if current_role not in current_user.roles:
                if server_roles[role][1][0] <= current_value <= server_roles[role][1][1]:
                    await current_user.add_roles(current_role)
                    await bot.get_channel(output).send(
                        f"```Roles of {current_user} updated as [+{current_role}]```")
            else:
                if not (server_roles[role][1][0] <= current_value <= server_roles[role][1][1]):
                    await current_user.remove_roles(current_role)
                    await bot.get_channel(output).send(
                        f"```Roles of {current_user} updated as [-{current_role}]```")

    @commands.Cog.listener()
    async def on_ready(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""
        res = db.create()
        res.print('start')

        for guild in bot.guilds:
            for member in guild.members:
                result = db.new_user(guild.id, guild.name, member.id, member.name, 0)
                result.print('on_ready')

        print('We have logged in as {0.user}'.format(bot))

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞-—Ä–æ–ª–µ–π –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        print('NewUser', member.guild.id, member.guild.name, member.id, member.name, True)
        for guild in bot.guilds:
            for member in guild.members:
                result = db.new_user(guild.id, guild.name, member.id, member.name, 0)

    @commands.command()
    @is_console()
    async def update(self, ctx):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞-—Ä–æ–ª–µ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        output = db.get_directory(ctx.guild.id).data[1]
        a = db.get_rating(ctx.guild.id, '*')
        b = db.get_roles(ctx.guild.id)

        server_users = a.data
        server_roles = b.data

        for user in server_users:
            current_user = bot.get_guild(ctx.guild.id).get_member(user)
            for role in server_roles:
                current_role = bot.get_guild(ctx.guild.id).get_role(role)
                if current_role not in current_user.roles:
                    if server_roles[role][1][0] <= server_users[user][1] <= server_roles[role][1][1]:
                        await current_user.add_roles(current_role)
                        await bot.get_channel(output).send(
                            f"```Roles of {current_user} updated as [+{current_role}]```")
                else:
                    if not (server_roles[role][1][0] <= server_users[user][1] <= server_roles[role][1][1]):
                        await current_user.remove_roles(current_role)
                        await bot.get_channel(output).send(
                            f"```Roles of {current_user} updated as [-{current_role}]```")
        await bot.get_channel(output).send(f"```–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã```")

    @commands.command()
    @is_console()
    async def add_rating(self, ctx, user_id: int, value: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        channel_output = bot.get_channel(db.get_directory(ctx.guild.id).data[1])

        res = db.add_rating(ctx.guild.id, user_id, value)
        res.print('add_rating')

        if res.state:
            await channel_output.send(
                f'```Rating of [{user_id} : {str(bot.get_user(user_id).name)}] for {value} points updated successfully```')
            await self.solo_update(ctx.guild.id, user_id)
        else:
            await channel_output.send(
                f'```[ERROR] [[{user_id} : {str(bot.get_user(user_id).name)}] is not in Database!]```')

    @commands.command()
    @is_console()
    async def set_rating(self, ctx, user_id: int, value: int):
        """–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        channel_output = bot.get_channel(db.get_directory(ctx.guild.id).data[1])

        res = db.set_rating(ctx.guild.id, user_id, value)
        res.print('set_rating')

        if res.state:
            await channel_output.send(
                f'```Rating of [{user_id} : {str(bot.get_user(user_id).name)}] for {value} points set successfully```')
            await self.solo_update(ctx.guild.id, user_id)
        else:
            await channel_output.send(
                f'```[ERROR] [[{user_id} : {str(bot.get_user(user_id).name)}] is not in Database!]```')

    @commands.command()
    @is_console()
    async def rating(self, ctx, user_id):
        """–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        channel_output = ctx.message.channel

        res = db.get_rating(ctx.guild.id, user_id)
        res.print('rating')
        output = ""
        for key in res.data:
            output += f"[{key}] {res.data[key][1]:5.0f}\t{res.data[key][0]}\n"
        await channel_output.send(f'```{output}```')

    @commands.command()
    @is_console()
    async def set_roles(self, ctx, *args):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""

        channel_output = bot.get_channel(db.get_directory(ctx.guild.id).data[1])
        args = list(map(int, args))

        for i in range(0, len(args), 3):
            try:
                role_id = args[i]
                rating_lower = args[i + 1]
                rating_upper = args[i + 2]

                res = db.set_roles(ctx.guild.id, ctx.guild.name, role_id, bot.get_guild(ctx.guild.id).get_role(role_id), rating_lower, rating_upper)
                res.print('set_roles')

                if res.state:
                    await channel_output.send(
                        f'```Role [{role_id}] [{str(bot.get_guild(ctx.guild.id).get_role(role_id))}] in [{rating_lower}:{rating_upper}] changed successfully```')
                else:
                    await channel_output.send(f'```[ERROR] [An error in the database!]```')

            except:
                await channel_output.send(f'```[ERROR] [An error due to missing parameters!]```')

        await ctx.message.channel.send(
            f"```–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n{self.roles_output(db.get_roles(ctx.guild.id).data)}```")

    @commands.command()
    @is_console()
    async def clear_roles(self, ctx, *args):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""

        channel_output = bot.get_channel(db.get_directory(ctx.guild.id).data[1])

        for role_id in args:
            try:
                res = db.clr_roles(ctx.guild.id, role_id)
                res.print('clear_roles')

                if res.state:
                    await channel_output.send(f"```Role with key [{role_id}] deleted successfully```")
                else:
                    await channel_output.send(f"```Role with key [{role_id}] delete failed```")
            except:
                await channel_output.send(f"```Role with key [{role_id}] is not in database```")

        await ctx.message.channel.send(
            f"```–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n{self.roles_output(db.get_roles(ctx.guild.id).data)}```")

    @commands.command()
    @is_console()
    async def roles(self, ctx):
        """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        res = db.get_roles(ctx.guild.id)
        res.print('roles')

        await ctx.message.channel.send(
            f"```–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n{self.roles_output(res.data)}```")


class Survey(commands.Cog):
    def survey_reactions(self, cases, reactions_result):
        text_result = ''
        survey_statistics = {}

        for i in range(len(cases)):
            text_result += f"{cases[i]} [{reactions_result[i]}]\n"
            survey_statistics.update({reactions_result[i]: 1})

        return text_result, survey_statistics

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        surveysDB = db.get_survey(payload.guild_id).data

        if payload.message_id in surveysDB.keys() and payload.member.bot is False:
            current_statistics = eval(surveysDB[payload.message_id][1])
            if str(payload.emoji) in list(current_statistics.keys()):
                current_statistics[str(payload.emoji)] += 1
                res = db.add_survey(payload.guild_id, payload.message_id, current_statistics)
                print('+reaction', res.state, None)

    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload):
        surveysDB = db.get_survey(payload.guild_id).data

        if payload.message_id in surveysDB.keys():
            current_statistics = eval(surveysDB[payload.message_id][1])
            if str(payload.emoji) in list(current_statistics.keys()):
                current_statistics[str(payload.emoji)] -= 1
                res = db.add_survey(payload.guild_id, payload.message_id, current_statistics)
                print('-reaction', res.state, None)

    @commands.command()
    @is_console()
    async def set_survey(self, ctx, *, body):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""

        info = db.get_directory(ctx.guild.id).data[2]  # info
        logs = db.get_directory(ctx.guild.id).data[1]  # logs
        title, *cases = body.strip().split('\n')  # –ø–∞—Ä—Å–∏–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        reactions = []  # —Å–æ–∑–¥–∞–µ–º –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        i = 0
        counter = len(cases)

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        while i < counter:
            new_emoji = random.choice(all_reactions)
            if new_emoji not in reactions:
                try:
                    await ctx.message.add_reaction(new_emoji)  # –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è —Å—Ç–∞–≤–∏—Ç—Å—è (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –î–∏—Å–∫–æ—Ä–¥)
                    i += 1
                    reactions.append(new_emoji)
                except:
                    continue

        # —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        text, stats = self.survey_reactions(cases, reactions)
        # —Å–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –æ–ø—Ä–æ—Å–∞
        embed = discord.Embed(
            title=f"{title}",
            description=f"{text}",
            colour=discord.Colour.from_rgb(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
        )
        survey_message = await bot.get_channel(info).send(embed=embed)

        # –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        for emj in reactions:
            await survey_message.add_reaction(emj)

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = db.set_survey(ctx.guild.id, bot.get_guild(ctx.guild.id).name, survey_message.id, title, stats)
        result.print('set_survey')
        if result.state:
            await bot.get_channel(logs).send(
                f"```Survey [{survey_message.id}] [{title}] {reactions} is created successfully```")
        else:
            await bot.get_channel(logs).send(f"```Survey is not created successfully :(```")

    @commands.command()
    @is_console()
    async def clear_survey(self, ctx, message_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

        info = db.get_directory(ctx.guild.id).data[2]  # info
        logs = db.get_directory(ctx.guild.id).data[1]  # logs
        channel = bot.get_channel(info)
        message = await channel.fetch_message(message_id)

        result = dict(eval(db.get_survey(ctx.guild.id).data[message_id][1]))

        all_votes = sum(result.values())

        output = "–û–ø—Ä–æ—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n"
        for key in result:
            percentage = result[key] / all_votes * 100
            output += f"[{key}] - {result[key]} | {percentage:.1f}%\n"

        await message.reply(f"""```{output}```""")

        res = db.clr_survey(ctx.guild.id, message_id)
        res.print('clear_survey')
        if res.state:
            await bot.get_channel(logs).send(f"""```Survey with [id = {message_id}] deleted successfully```""")
        else:
            await bot.get_channel(logs).send(f"""```Survey with [id = {message_id}] doesn't deleted!```""")

    @commands.command()
    @is_console()
    async def check_survey(self, ctx, message_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–æ—Å–∞"""

        res = db.get_survey(ctx.guild.id)
        res.print('check_survey')
        survey_dict = eval(res.data[message_id][1])
        all_votes = sum(survey_dict.values())

        output = "–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:\n"
        for key in survey_dict:
            percentage = survey_dict[key] / all_votes * 100
            output += f"[{key}] - {survey_dict[key]} | {percentage:.1f}%\n"

        await bot.get_channel(ctx.channel.id).send(f"""```{output}```""")

    @commands.command()
    @is_console()
    async def get_survey(self, ctx):
        """–í—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        channel_id = ctx.channel.id
        res = db.get_survey(ctx.guild.id)
        print('get_survey')
        surveys = res.data
        output = ""
        for key in surveys:
            output += f"[{key}]\t[{surveys[key][1]}]\t[{surveys[key][0]}]\n"

        await bot.get_channel(channel_id).send(f"```{output}```")
